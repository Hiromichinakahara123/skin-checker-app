# -*- coding: utf-8 -*-
"""肌状態ver.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17BF1yAM_-zu-ftGrw5IAyhMVyE6wvEnS
"""

import streamlit as st

def classify_skin_type(hydration, oil):
    # 各肌タイプの条件に基づいて分類
    if 33 <= hydration <= 100 and 0 <= oil <= 33:
        return "普通肌"
    elif hydration <= 32 and oil <= 30:
        return "乾燥肌"
    elif 33 <= hydration <= 100 and 34 <= oil <= 100:
        return "脂性肌"
    elif 0 <= hydration <= 32 and 31 <= oil <= 100:
        return "内部乾燥肌"
    else:
        return "不明な肌タイプ"

# アドバイス生成関数
def generate_advice(skin_type, elasticity, whiteness):
    if skin_type == "普通肌":
        if elasticity >= 80 and whiteness >= 80:
            return "水分量と油分量が適正で、弾力と白さが高い理想的な状態を保っている素晴らしいですね。現在のスキンケア方法を継続して、この健康的な肌状態を長く保ちましょう。"
        elif elasticity < 80 and whiteness >= 80:
            return "コラーゲンやエラスチンをサポートする成分（例えばビタミンCやレチノール）が含まれるスキンケア製品の使用をお勧めします。定期的なマッサージや顔のエクササイズも肌の弾力性を高めるのに効果的です。"
        elif elasticity >= 80 and whiteness < 80:
            return "ビタミンCやアルブチンといった明るくする効果のある成分を含む製品を取り入れることを推奨します。日焼け止めの日常的な使用も、肌を守りながらトーンの均一性を保つために重要です。"
        else:
            return "肌の修復と保護に焦点を当てたアプローチが必要です。ペプチドやアンチオキシダントを豊富に含むナイトクリームの使用を考えてみてください。また、週に数回の保湿マスクで肌をいたわり、外部のダメージから肌を守ることが大切です。"
    elif skin_type == "乾燥肌":
        return generate_advice_for_dry_skin(elasticity, whiteness)
    elif skin_type == "脂性肌":
        return generate_advice_for_oily_skin(elasticity, whiteness)
    elif skin_type == "内部乾燥肌":
        return generate_advice_for_combination_dry_skin(elasticity, whiteness)
    else:
        return "肌タイプが特定できなかったため、具体的なアドバイスを提供することができません。"

# 乾燥肌に対するアドバイス生成関数
def generate_advice_for_dry_skin(elasticity, whiteness):
    # 乾燥肌に対するアドバイスの詳細条件
    if elasticity < 50 and whiteness < 50:
        return ("皮膚の水分と油分のバランスが不足しており、乾燥が見られます。肌の弾力と白さも低いため、"
                "全面的なケアが必要です。高保湿成分を含むクリームやセラミド配合のローションを日常的に使用し、"
                "水分保持能力を高めることが推奨されます。また、UVカット効果のある日焼け止めを使うことで肌のダメージを防ぎましょう。")
    elif elasticity >= 50 and whiteness < 50:
        return ("油分と水分が不足している一方で、肌の弾力は保持されています。ターゲットを絞ったケアが求められます。"
                "肌のうるおいを保つために、ヒアルロン酸やグリセリン配合の化粧水で保湿を心掛け、弾力を支えるために、"
                "コラーゲンやエラスチンが豊富な美容液を加えることをお勧めします。")
    elif elasticity < 50 and whiteness >= 50:
        return ("肌の白さは維持されていますが、水分と油分の不足が問題です。肌の保湿に特化したスキンケアを行い、"
                "特に乾燥しやすい頬や目元のケアを重点的に行うことが大切です。夜のスキンケアには、肌のバリア機能を高める"
                "ナイトクリームの使用を推奨します。")
    else:  # elasticity >= 50 and whiteness >= 50
        return ("水分と油分の不足は見られるものの、肌の弾力と白さは良好な状態です。肌質に合わせた保湿が重要です。"
                "肌の水分量を増やすために、水分保持成分の高い化粧水や、保湿効果の長時間持続するセラミド配合の乳液を利用しましょう。"
                "また、抗酸化成分を含むスキンケア製品で肌を健やかに保つことも有効です。")

# 脂性肌に対するアドバイス生成関数
def generate_advice_for_oily_skin(elasticity, whiteness):
    # 脂性肌に対するアドバイスの詳細条件
    if 50 <= elasticity <= 80 and 50 <= whiteness <= 80:
        return ("肌は潤いを保ちつつも、適切なスキンケアでテカリや毛穴の問題を管理することが重要です。"
                "日々の洗顔で余分な油分を落とし、水分バランスを整える軽い保湿剤を使用しましょう。")
    elif elasticity < 50 and 50 <= whiteness <= 80:
        return ("肌は潤いを保ちつつも、適切なスキンケアでテカリや毛穴の問題を管理することが重要です。"
                "エラスチンとコラーゲンの生成を促す成分が含まれた製品を選び、定期的に使うことで肌の弾力を改善しましょう。")
    elif 50 <= elasticity <= 80 and whiteness < 50:
        return ("肌は潤いを保ちつつも、適切なスキンケアでテカリや毛穴の問題を管理することが重要です。"
                "ビタミンCやニコチンアミドが含まれた明るさを促進するスキンケア製品を使用し、定期的なピーリングで古い角質を取り除くことをお勧めします。"
                "これにより、肌のトーンが均一になり、健康的な輝きを取り戻すことができます。")
    else:  # elasticity < 50 and whiteness < 50
        return ("肌は潤いを保ちつつも、適切なスキンケアでテカリや毛穴の問題を管理することが重要です。"
                "肌のハリと明るさを向上させるために、ペプチドや抗酸化成分、そして肌の明るさを支えるビタミンCを含む製品の使用をお勧めします。"
                "また、適切な紫外線対策も重要です。これにより、肌の全体的な健康と見た目が改善されます。")

# 内部乾燥肌に対するアドバイス生成関数
def generate_advice_for_combination_dry_skin(elasticity, whiteness):
    # 内部乾燥肌に対するアドバイスの詳細条件
    if elasticity < 50 and 50 <= whiteness <= 80:
        return ("お肌の内部乾燥に対応するため、水分と油分のバランスを整えるスキンケアをお勧めします。"
                "特に、保湿力の高い化粧水と、肌のバリア機能を支えるセラミド配合のクリームを使用して、肌の保護と補修に努めてください。")
    elif elasticity >= 50 and 50 <= whiteness <= 80:
        return ("お肌の弾力は保たれていますが、内部の乾燥が問題です。高保湿成分配合のローションや美容液を積極的に使用し、"
                "水分の補給と保持を心掛けましょう。また、週に数回のパックを加えることで、より効果を感じられるでしょう。")
    elif elasticity < 50 and whiteness < 50:
        return ("お肌の乾燥が原因でくすみが見られる場合、ビタミンC誘導体やナイアシンアミド配合の製品を使い、"
                "肌のトーンを整えることが重要です。これにより、内部乾燥をケアしながら、肌の明るさも改善できます。")
    else:  # elasticity >= 50 and whiteness < 50
        return ("弾力性は保持されていますが、肌のトーンに課題があるため、明るく健康的な肌色を目指してください。"
                "トーンアップ効果のある化粧品や、肌を穏やかに整えるピーリング商品の使用をお勧めします。常に保湿を忘れずに。")

# StreamlitアプリケーションのUI部分
st.title("スキンチェッカーアプリ")
st.write("測定した水分量、油分量、弾力性、白さを入力してください。")

# ユーザーからの入力
hydration = st.slider("水分量（0～100）", 0, 100, 50)
oil = st.slider("油分量（0～100）", 0, 100, 50)
elasticity = st.slider("弾力性（0～100）", 0, 100, 50)
whiteness = st.slider("白さ（0～100）", 0, 100, 50)

# 肌タイプ診断とアドバイスの生成
if st.button("肌タイプを診断"):
    skin_type = classify_skin_type(hydration, oil)
    st.success(f"あなたの肌タイプは: {skin_type}")

    advice = generate_advice(skin_type, elasticity, whiteness)
    st.info(f"スキンケアアドバイス: {advice}")